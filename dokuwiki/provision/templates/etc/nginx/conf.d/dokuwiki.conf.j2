# autogen true
# NOTE: by default this file is automatically generated on container startup.
# To disable the autogeneration simply change the first line of this file to
# 'autogen false'
#-------------------------------------------------------------------------------


limit_conn_log_level            warn;
limit_req_zone                  $limit zone=php:5m rate=50r/s;

{% if NGINX_REDIRECT_TO_FIRST_DOMAIN and DOMAINNAMES|length > 1 -%}
server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    server_name                 {% for domain in DOMAINNAMES %}{% if not loop.first %}{{ domain }} {% endif %}{% endfor %};

    location / {
        return 301              $real_scheme://{{ DOMAINNAMES[0] }}$request_uri;
    }

    # Let's Encrypt challenge response uri
    location ^~ /.well-known/acme-challenge {
        default_type "text/plain";
        root /var/www/letsencrypt-challenge-response;
    }
}

{% endif -%}
server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }} default_server;
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    {% if DOMAINNAMES|length > 0 -%}
    server_name                 {% if NGINX_REDIRECT_TO_FIRST_DOMAIN %}{{ DOMAINNAMES[0] }}{% else %}{% for domain in DOMAINNAMES %}{{ domain }} {% endfor %}{% endif %};
    {%- endif %}

    root                        /data/www;
    index                       doku.php;

    {% if NGINX_REWRITE_HTTPS -%}
    # rewrite HTTP requests to HTTPS, except when the request is a Let's Encrypt
    # challenge response
    rewrite_by_lua_block {
        if not string.match(ngx.var.request_uri, "^/%.well%-known/acme%-challenge") and
                ngx.var.real_scheme ~= "https" then
            return ngx.redirect("https://" .. ngx.var.host .. ngx.var.request_uri, 301)
        end
    }
    {%- endif %}

    # Let's Encrypt challenge response uri
    location ^~ /.well-known/acme-challenge {
        default_type "text/plain";
        root /var/www/letsencrypt-challenge-response;
    }

    location / {
        try_files $uri $uri/ @dokuwiki;
    }

    location = /robots.txt      { log_not_found off; }
    location = /favicon.ico     { access_log off; log_not_found off; }
    location ~ /\.              { access_log off; log_not_found off; deny all; }
    location ~ ~$               { access_log off; log_not_found off; deny all; }

    # rewrite for nice urls
    location @dokuwiki {
        rewrite ^/_media/(.*) /lib/exe/fetch.php?media=$1 last;
        rewrite ^/_detail/(.*) /lib/exe/detail.php?media=$1 last;
        rewrite ^/_export/([^/]+)/(.*) /doku.php?do=export_$1&id=$2 last;
        rewrite ^/(.*) /doku.php?id=$1&$args last;
    }

    error_page 418 = @dokuwiki;
    {% if DOKUWIKI_IS_INSTALLED == 'true' -%}
    location ~ ^/(data/|conf/|bin/|inc/|install.php) { return 418; }
    {%- endif %}

    # pass PHP scripts to PHP-FPM
    location ~ ^(.+\.php)(.*)$ {
        limit_req               zone=php burst=50;
        try_files               $uri =404;
        fastcgi_split_path_info ^(.+\.php)(.*)$;
        include                 /etc/nginx/fastcgi_params;
        fastcgi_read_timeout    {{ NGINX_FASTCGI_READ_TIMEOUT }};
        fastcgi_param           SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        fastcgi_param           PATH_INFO $uri;
        fastcgi_pass            unix:/var/run/container/php7-fpm.sock;
    }

    # client caching
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires                 1M;
        more_set_headers        "Pragma: public";
        more_set_headers        "Cache-Control: public, must-revalidate, proxy-revalidate";
        access_log              off;
        try_files               $uri @dokuwiki;
    }
    location ~* \.(?:rss|atom)$ {
        expires                 1h;
        more_set_headers        "Cache-Control: public";
        try_files               $uri @dokuwiki;
    }
}
