# autogen true
# NOTE: by default this file is automatically generated on container startup.
# To disable the autogeneration simply change the first line of this file to
# 'autogen false'
#-------------------------------------------------------------------------------


limit_conn_log_level    warn;
limit_req_zone          $limit zone=php:5m rate=30r/s;

{% if NGINX_REDIRECT_TO_FIRST_DOMAIN and DOMAINNAMES|length > 1 -%}
server {
    listen              8080;
    listen              [::]:8080;
    listen              8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    listen              [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    server_name         {% for domain in DOMAINNAMES %}{% if not loop.first %}{{ domain }} {% endif %}{% endfor %};

    location / {
        return 301      $real_scheme://{{ DOMAINNAMES[0] }}$request_uri;
    }

    # Let's Encrypt challenge response uri
    location ^~ /.well-known/acme-challenge {
        default_type "text/plain";
        root /var/www/letsencrypt-challenge-response;
    }
}

{% endif -%}
server {
    listen              8080;
    listen              [::]:8080;
    listen              8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }} default_server;
    listen              [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    {% if DOMAINNAMES|length > 0 -%}
    server_name         {% if NGINX_REDIRECT_TO_FIRST_DOMAIN %}{{ DOMAINNAMES[0] }}{% else %}{% for domain in DOMAINNAMES %}{{ domain }} {% endfor %}{% endif %};
    {%- endif %}

    root                /data/www;
    index               index.php;

    {% if NGINX_REWRITE_HTTPS -%}
    # rewrite HTTP requests to HTTPS, except when the request is a Let's Encrypt
    # challenge response
    rewrite_by_lua_block {
        if not string.match(ngx.var.request_uri, "^/%.well%-known/acme%-challenge") and
                ngx.var.real_scheme ~= "https" then
            return ngx.redirect("https://" .. ngx.var.host ..{{ ' ":' + NGINX_REWRITE_HTTPS_PORT + '" ..' if NGINX_REWRITE_HTTPS_PORT != 443 else '' }} ngx.var.request_uri, 301)
        end
    }
    {%- endif %}

    # Let's Encrypt challenge response uri
    location ^~ /.well-known/acme-challenge {
        default_type "text/plain";
        root /var/www/letsencrypt-challenge-response;
    }

    # url with trailing slash
    location ~ ^([^.\?]*[^/])$ {
        return          301 $scheme://$host$request_uri/;
    }

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    # disable logging and/or deny access
    location = /robots.txt  { log_not_found off; }
    location = /favicon.ico { access_log off; log_not_found off; }
    location ~ /\.          { access_log off; log_not_found off; deny all; }
    location ~* \.(txt|log|inc)$ { allow 127.0.0.1; deny all; }
    location /config { deny all; }

    # client caching
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires                  1M;
        more_set_headers         "Pragma: public";
        more_set_headers         "Cache-Control: public, must-revalidate, proxy-revalidate";
        access_log               off;
    }

    # pass PHP scripts to PHP-FPM
    location ~* (index\.php|upload\.php|connector\.php|dl\.php|ut\.php|lt\.php|download\.php)$ {
        limit_req                 zone=php burst=30;
        try_files                 $fastcgi_script_name =404;
        fastcgi_split_path_info   ^(.|\.php)(/.+)$;
        fastcgi_read_timeout      {{ NGINX_FASTCGI_READ_TIMEOUT }};
        include                   /etc/nginx/fastcgi_params;
        fastcgi_param             SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        fastcgi_intercept_errors  on;
        fastcgi_pass              unix:/var/run/container/php7-fpm.sock;
    }

    # block access to all other php files
    location ~ \.php$ { deny all; }
}
