# container_managed=true                                                       #
#                                                                              #
# NOTE: by default this file is automatically generated on container startup.  #
# To disable the autogeneration simply change the first line of this file to   #
# 'container_managed=false'                                                    #
################################################################################
{% macro bool(val) -%}{{ '1' if val else '0' }}{%- endmacro %}

mode = server
daemon = 0
fork = 1

# The default addresses to listen on depend upon compile time options.
# They may be overridden here.
listen = {{ BURP_SERVER_ADDRESS }}:4971
# Think carefully before changing the status port address, as it can be used
# to view the contents of backups.
listen_status = {{ BURP_SERVER_STATUS_ADDRESS }}:4972

directory = /container/backup
directory_tree = 1
dedup_group = {{ BURP_SERVER_DEDUP_GROUP }}
clientconfdir = /container/burp/clientconfdir
# Choose the protocol to use.
# 0 to decide automatically, 1 to force protocol1 mode (file level granularity
# with a pseudo mirrored storage on the server and optional rsync). 2 forces
# protocol2 mode (inline deduplication with variable length blocks).
# Like many other settings, this can be set per client in the clientconfdir
# files.
protocol = {{ BURP_SERVER_PROTOCOL }}
pidfile = /var/run/container/burp.server.pid
hardlinked_archive = {{ bool(BURP_SERVER_HARDLINKED_ARCHIVE) }}
working_dir_recovery_method = {{ BURP_SERVER_WORKING_DIR_RECOVERY_METHOD }}
max_children = {{ BURP_SERVER_MAX_CHILDREN }}
max_status_children = {{ BURP_SERVER_MAX_STATUS_CHILDREN }}
umask = {{ BURP_SERVER_UMASK }}
syslog = 0
stdout = 1
# The following options can restrict what the client can do.
# Restore clients can override all of these expect for force_backup.
client_can_delete = {{ bool(BURP_SERVER_CLIENT_CAN_DELETE) }}
# Set client_can_force_backup to 0 to only allow timed backups.
client_can_force_backup = {{ bool(BURP_SERVER_CLIENT_CAN_FORCE_BACKUP) }}
client_can_list = {{ bool(BURP_SERVER_CLIENT_CAN_LIST) }}
# Set client_can_restore to 0 if you want restores to only be initialised by
# the server.
client_can_restore = {{ bool(BURP_SERVER_CLIENT_CAN_RESTORE) }}
client_can_verify = {{ bool(BURP_SERVER_CLIENT_CAN_VERIFY) }}
{% if BURP_SERVER_RATELIMIT > 0.0 -%}
# Ratelimit throttles the send speed. Specified in Megabits per second (Mb/s).
ratelimit = {{ BURP_SERVER_RATELIMIT }}
{%- endif %}
# Network timeout defaults to 7200 seconds (2 hours).
network_timeout = {{ BURP_SERVER_NETWORK_TIMEOUT }}

password_check = {{ bool(BURP_SERVER_PASSWORD_CHECK) }}

# Server storage compression. Default is zlib9. Set to zlib0 to turn it off.
compression = zlib{{ BURP_SERVER_COMPRESSION }}

# When the client version does not match the server version, log a warning.
# Set to 0 to turn it off.
version_warn = {{ bool(BURP_SERVER_VERSION_WARN) }}

# More configuration files can be read, using syntax like the following
# (without the leading '# ').
# . path/to/more/conf

# Location of autoupgrade files to serve to clients. Leave it commented out
# to not autoupgrade clients.
# autoupgrade_dir = /etc/burp/autoupgrade/server

# You can have as many 'keep' lines as you like.
# For example, if running backups daily, setting 7, 4, 6 will keep
# 7 daily backups, 4 weekly, and 6 four-weekly backups.
{% for keep in BURP_SERVER_KEEP %}
keep = {{ keep }}
{%- endfor %}

hardlinked_archive = {{ bool(BURP_SERVER_HARDLINKED_ARCHIVE) }}
max_hardlinks = {{ BURP_SERVER_MAX_HARDLINKS }}
librsync = {{ BURP_SERVER_LIBRSYNC }}

# CA options.
# If you want your server to be a certificate authority and generate its own
# certificates, uncomment the following lines. If the directory specified in
# ca_conf does not exist, the server will create, populate it, and the paths
# indicated by ssl_cert_ca, ssl_cert, ssl_key and ssl_dhfile below will be
# overwritten. See docs/burp_ca.txt for more information.
ca_conf = /container/burp/CA.cnf
ca_name = {{ BURP_SERVER_CA_NAME }}
ca_server_name = {{ BURP_SERVER_CA_SERVER_NAME }}
ca_burp_ca = /usr/sbin/burp_ca

# Check for revoked certificates in the certificate revocation list.
# Turn this off if you use the old ssl_extra_checks_script server script.
ca_crl_check = {{ BURP_SERVER_CA_CRL_CHECK }}

# SSL certificate authority - same file on both server and client
ssl_cert_ca = {{ BURP_SERVER_SSL_CERT_CA }}

# Server SSL certificate
ssl_cert = {{ BURP_SERVER_SSL_CERT }}

# Server SSL key
ssl_key = {{ BURP_SERVER_SSL_KEY }}

# Server SSL ciphers
ssl_ciphers = EECDH+AESGCM:EDH+AESGCM

# Disable TLS compression to protect against BEAST and CRIME attacks
ssl_compression = zlib0

{% if BURP_SERVER_SSL_KEY_PASSWORD != "" -%}
# SSL key password, for loading a certificate with encryption.
ssl_key_password = {{ BURP_SERVER_SSL_KEY_PASSWORD }}
{%- endif %}

# Server DH file.
ssl_dhfile = {{ BURP_SERVER_SSL_DHFILE }}

timestamp_format = {{ BURP_SERVER_TIMESTAMP_FORMAT }}

# Timing for backups
# Available units:
# s (seconds), m (minutes), h (hours), d (days), w (weeks), n (months)
{% for timer in BURP_SERVER_TIMER_ARG %}
timer_arg = {{ timer }}
{%- endfor %}

# Uncomment the notify_success_* lines for email notifications of backups that
# succeeded.
# In the subject line, the following are substituted:
# %b - "backup"/"restore"/"verify"
# %c - client name
# %w - number of warnings, if any
{% if BURP_SERVER_NOTIFY_SUCCESS -%}
notify_success_script = /container/burp/notify.sh
notify_success_arg = To: {{ SMTP_TO }}
notify_success_arg = From: {{ SMTP_FROM }}
notify_success_arg = Subject: {{ BURP_SERVER_NOTIFY_SUCCESS_SUBJECT }}
#Uncomment the following to have success notifications only if there were
#warnings.
notify_success_warnings_only = {{ bool(BURP_SERVER_NOTIFY_SUCCESS_WARNINGS_ONLY) }}
#Uncomment the following to have success notifications only if there were
#new or changed files.
notify_success_changes_only = {{ bool(BURP_SERVER_NOTIFY_SUCCESS_CHANGES_ONLY) }}
{%- endif %}

# Uncomment the following for email notifications of backups that failed.
{% if BURP_SERVER_NOTIFY_FAILURE -%}
notify_failure_script = /usr/share/burp/scripts/notify_script
notify_failure_arg = msmtp
notify_failure_arg = To: {{ SMTP_TO }}
notify_failure_arg = From: {{ SMTP_FROM }}
notify_failure_arg = Subject: {{ BURP_SERVER_NOTIFY_FAILURE_SUBJECT }}
{%- endif %}

# The server can run scripts on each connection after authentication and before
# disconnecting.
{# server_script_pre = /usr/share/burp/scripts/ssl_extra_checks_script
server_script_pre_arg = /container/tls/crl
server_script_pre_arg = /container/burp/burp-server.conf
{% if BURP_SERVER_SCRIPT_PRE != "" -%}
server_script_pre_arg = {{ BURP_SERVER_SCRIPT_PRE }}
{%- endif %} #}
# Set server_script_pre_notify to 1 to have notifications on server_script_pre
# returning non-zero. Most people will want to leave this off - it could
# result in a lot of emails because clients normally connect once every 20
# minutes. Requires notify_failure_script to be set above.
server_script_pre_notify = {{ bool(BURP_SERVER_SCRIPT_PRE_NOTIFY) }}

{% if BURP_SERVER_SCRIPT_POST != '' -%}
server_script_post = {{ BURP_SERVER_SCRIPT_POST }}
# server_script_post_arg =
# server_script_post_arg =
server_script_post_run_on_fail = {{ bool(BURP_SERVER_SCRIPT_POST_RUN_ON_FAIL) }}
# As for server_script_pre_notify, but for post.
server_script_post_notify = {{ bool(BURP_SERVER_SCRIPT_POST_NOTIFY) }}
{%- endif %}

# Clients that are able to list and restore files belonging to any other
# client. If this is too permissive, you may set a restore_client for
# individual original clients in the individual clientconfdir files.
{% for restore_client in BURP_SERVER_RESTORE_CLIENT + ['burp-control-client'] %}
restore_client = {{ restore_client }}
{%- endfor %}

# Whether or not the server process should cache the tree when a monitor client
# is browsing a backup. Advantage: speed. Disadvantage: more memory is used.
monitor_browse_cache = {{ bool(BURP_SERVER_MONITOR_BROWSE_CACHE) }}
