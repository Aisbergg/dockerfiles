# container_managed=true                                                       #
#                                                                              #
# NOTE: by default this file is automatically generated on container startup.  #
# To disable the autogeneration simply change the first line of this file to   #
# 'container_managed=false'                                                    #
################################################################################

# cache_purge
fastcgi_cache_path /var/cache/nginx levels=1:2 keys_zone=NEXTCLOUD:100m inactive=60m;
map $request_uri $skip_cache {
    default                     1;
    ~*/thumbnail.php            0;
    ~*/apps/gallery/            0;
}

{% if NGINX_REDIRECT_TO_FIRST_DOMAIN and DOMAINNAMES|length > 1 -%}
server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    server_name                 {% for domain in DOMAINNAMES %}{% if not loop.first %}{{ domain }} {% endif %}{% endfor %};

    location / {
        return 301              $real_scheme://{{ DOMAINNAMES[0] }}$request_uri;
    }
}
{%- endif %}

server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }} default_server;
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    {% if DOMAINNAMES|length > 0 -%}
    server_name                 {% if NGINX_REDIRECT_TO_FIRST_DOMAIN %}{{ DOMAINNAMES[0] }}{% else %}{% for domain in DOMAINNAMES %}{{ domain }} {% endfor %}{% endif %};
    {%- endif %}

    root                        /container/www;
    index                       index.php;

    {% if NGINX_REWRITE_HTTPS -%}
    if ($real_scheme != "https") {
        return 301              https://$host$request_uri;
    }
    {%- endif %}

    # add security headers
    more_set_headers "X-Frame-Options: SAMEORIGIN";
    more_set_headers "X-Robots-Tag: none";
    more_set_headers "X-Download-Options: noopen";
    more_set_headers "X-Permitted-Cross-Domain-Policies: none";
    more_set_headers "Referrer-Policy: no-referrer";

    # add nosniff header
    #   see: https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    more_set_headers "X-Content-Type-Options: nosniff";

    # enable anti-cross-site scripting filter built into Internet Explorer,
    # Chrome and Safari
    #   see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    more_set_headers "X-XSS-Protection: 1; mode=block";

    # user_webfinger app
    rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;

    # Social app
    rewrite ^/.well-known/webfinger /public.php?service=webfinger last;

    location = /.well-known/carddav {
        return 301 $real_scheme://$host/remote.php/dav;
    }
    location = /.well-known/caldav {
        return 301 $real_scheme://$host/remote.php/dav;
    }

    # disable logging
    location = /robots.txt  { access_log off; log_not_found off; allow all; }
    location = /favicon.ico { access_log off; log_not_found off; }

    location / {
        rewrite ^ /index.php$request_uri;
    }

    # deny access
    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data|skeleton)/ { deny all; }
    location ~ ^/(?:\.autotest|occ|issue|indie|db_|console|README) { deny all; }

    # cache_purge (with $http_cookies we have unique keys for the user)
    fastcgi_cache_key $http_cookie$request_method$host$request_uri;
    fastcgi_cache_use_stale error timeout invalid_header http_500;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

    # pass PHP scripts to PHP-FPM
    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+)\.php(?:$|/) {
        fastcgi_split_path_info     ^(.+\.php)(/.+)$;
        fastcgi_read_timeout        {{ NGINX_FASTCGI_READ_TIMEOUT }};
        include                     /etc/nginx/fastcgi_params;
        #Avoid sending the security headers twice
        fastcgi_param               modHeadersAvailable true;
        fastcgi_param               front_controller_active true;
        fastcgi_param               SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param               PATH_INFO $fastcgi_path_info;
        fastcgi_pass                unix:/var/run/container/php7-fpm.sock;
        fastcgi_intercept_errors    on;
        fastcgi_request_buffering   off;
        # Remove X-Powered-By, which is an information leak
        fastcgi_hide_header         X-Powered-By;

        # cache_purge
        fastcgi_cache_bypass        $skip_cache;
        fastcgi_no_cache            $skip_cache;
        fastcgi_cache               NEXTCLOUD;
        fastcgi_cache_valid         60m;
        fastcgi_cache_methods       GET HEAD;
    }

    location ~ ^/(?:updater|ocs-provider)(?:$|/) {
        try_files $uri/ =404;
        index index.php;
    }

    # adding the cache control header for js and css files
    location ~* \.(?:css|js|ttf|woff|svg|gif)$ {
        try_files $uri /index.php$request_uri;
        more_set_headers "Cache-Control: public, max-age=15778463";
        access_log off;
    }

    # disable logging for other assets
    location ~* \.(?:png|html|ico|jpg|jpeg)$ {
        try_files $uri /index.php$request_uri;
        access_log off;
    }
}
