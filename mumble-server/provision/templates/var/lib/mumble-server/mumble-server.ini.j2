; autogen true
; NOTE: by default this file is automatically generated on container startup.
; To disable the autogeneration simply change the first line of this file to
; 'autogen false'
;-------------------------------------------------------------------------------


; General notes:
; * Settings in this file are default settings and many of them can be overridden
;   with virtual server specific configuration via the Ice or DBus interface.
; * Due to the way this configuration file is read some rules have to be
;   followed when specifying variable values (as in variable = value):
;     * Make sure to quote the value when using commas in strings or passwords.
;        NOT variable = super,secret BUT variable = "super,secret"
;     * Make sure to escape special characters like '\' or '"' correctly
;        NOT variable = """ BUT variable = "\""
;        NOT regex = \w* BUT regex = \\w*

{% if MUMBLE_DATABASE_DRIVER == "QSQLITE" -%}
; Murmur defaults to using SQLite with its default rollback journal.
; In some situations, using SQLite's write-ahead log (WAL) can be
; advantageous.
; If you encounter slowdowns when moving between channels and similar
; operations, enabling the SQLite write-ahead log might help.
;
; To use SQLite's write-ahead log, set sqlite_wal to one of the following
; values:
;
; 0 - Use SQLite's default rollback journal.
; 1 - Use write-ahead log with synchronous=NORMAL.
;     If Murmur crashes, the database will be in a consistent state, but
;     the most recent changes might be lost if the operating system did
;     not write them to disk yet. This option can improve Murmur's
;     interactivity on busy servers, or servers with slow storage.
; 2 - Use write-ahead log with synchronous=FULL.
;     All database writes are synchronized to disk when they are made.
;     If Murmur crashes, the database will be include all completed writes.
sqlite_wal={{ MUMBLE_DATABASE_SQLITE_WAL }}
{%- endif %}

; If you wish to use something other than SQLite, you'll need to set the name
; of the database above, and also uncomment the below.
; Sticking with SQLite is strongly recommended, as it's the most well tested
; and by far the fastest solution.
;
dbDriver={{ MUMBLE_DATABASE_DRIVER }}
{% if MUMBLE_DATABASE_DRIVER == "QMYSQL" -%}
database={{ MUMBLE_DATABASE_MYSQL_NAME }}
dbUsername={{ MUMBLE_DATABASE_MYSQL_USER }}
dbPassword={{ MUMBLE_DATABASE_MYSQL_PASSWORD }}
dbHost={{ MUMBLE_DATABASE_MYSQL_HOST }}
dbPort={{ MUMBLE_DATABASE_MYSQL_PORT }}
dbPrefix={{ MUMBLE_DATABASE_MYSQL_PREFIX }}
dbOpts={{ MUMBLE_DATABASE_MYSQL_OPTS }}
{%- else %}
; Path to database. If blank, will search for
; murmur.sqlite in default locations or create it if not found.
database=/var/lib/mumble-server/mumble-server.sqlite
{%- endif %}

; If you want to use ZeroC Ice to communicate with Murmur, you need
; to specify the endpoint to use. Since there is no authentication
; with ICE, you should only use it if you trust all the users who have
; shell access to your machine.
; Please see the ICE documentation on how to specify endpoints.
ice="tcp -h 127.0.0.1 -p 6502"

; Ice primarily uses local sockets. This means anyone who has a
; user account on your machine can connect to the Ice services.
; You can set a plaintext "secret" on the Ice connection, and
; any script attempting to access must then have this secret
; (as context with name "secret").
; Access is split in read (look only) and write (modify)
; operations. Write access always includes read access,
; unless read is explicitly denied (see note below).
;
; Note that if this is uncommented and with empty content,
; access will be denied.

{% if MUMBLE_ICE_DENY_READ -%}
icesecretread=
{% elif MUMBLE_ICE_SECRET_READ != "" -%}
icesecretread={{ MUMBLE_ICE_SECRET_READ }}
{%- endif %}
{% if MUMBLE_ICE_DENY_WRITE -%}
icesecretwrite=
{% elif MUMBLE_ICE_SECRET_WRITE != "" -%}
icesecretwrite={{ MUMBLE_ICE_SECRET_WRITE }}
{%- endif %}

; How many login attempts do we tolerate from one IP
; inside a given timeframe before we ban the connection?
; Note that this is global (shared between all virtual servers), and that
; it counts both successfull and unsuccessfull connection attempts.
; Set either Attempts or Timeframe to 0 to disable.
autobanAttempts={{ MUMBLE_AUTOBAN_ATTEMPTS }}
autobanTimeframe={{ MUMBLE_AUTOBAN_TIMEFRAME }}
autobanTime={{ MUMBLE_AUTOBAN_TIME }}

; Specifies the file Murmur should log to. By default, Murmur
; logs to the file 'murmur.log'. If you leave this field blank
; on Unix-like systems, Murmur will force itself into foreground
; mode which logs to the console.
;logfile=murmur.log

; If set, Murmur will write its process ID to this file
; when running in daemon mode (when the -fg flag is not
; specified on the command line). Only available on
; Unix-like systems.
;pidfile=

; The below will be used as defaults for new configured servers.
; If you're just running one server (the default), it's easier to
; configure it here than through D-Bus or Ice.
;
; Welcome message sent to clients when they connect.
; If the welcome message is set to an empty string,
; no welcome message will be sent to clients.
welcometext="{{ MUMBLE_WELCOME_TEXT }}"

; Port to bind TCP and UDP sockets to.
port=64738

; Specific IP or hostname to bind to.
; If this is left blank (default), Murmur will bind to all available addresses.
host={{ MUMBLE_HOST }}

; Password to join server.
serverpassword={{ MUMBLE_SERVERPASSWORD }}

; Maximum bandwidth (in bits per second) clients are allowed
; to send speech at.
bandwidth={{ MUMBLE_BANDWIDTH }}

; Maximum number of concurrent clients allowed.
users={{ MUMBLE_USERS }}

; Respond to UDP ping packets.
;
; Setting to true exposes the current user count, the maximum user count, and
; the server's maximum bandwidth per client to unauthenticated users. In the
; Mumble client, this information is shown in the Connect dialog.
allowping={{ MUMBLE_ALLOWPING | lower }}

; Amount of users with Opus support needed to force Opus usage, in percent.
; 0 = Always enable Opus, 100 = enable Opus if it's supported by all clients.
opusthreshold={{ MUMBLE_OPUS_THRESHOLD }}

; Maximum depth of channel nesting. Note that some databases like MySQL using
; InnoDB will fail when operating on deeply nested channels.
channelnestinglimit={{ MUMBLE_CHANNEL_NESTING_LIMIT }}

; Regular expression used to validate channel names.
; (Note that you have to escape backslashes with \ )
channelname={{ MUMBLE_CHANNEL_NAME }}

; Regular expression used to validate user names.
; (Note that you have to escape backslashes with \ )
username={{ MUMBLE_USERNAME }}

; Maximum length of text messages in characters. 0 for no limit.
textmessagelength={{ MUMBLE_TEXT_MESSAGE_LENGTH }}

; Maximum length of text messages in characters, with image data. 0 for no limit.
imagemessagelength={{ MUMBLE_IMAGE_MESSAGE_LENGTH }}

; Allow clients to use HTML in messages, user comments and channel descriptions?
allowhtml={{ MUMBLE_ALLOWHTML }}

; Murmur retains the per-server log entries in an internal database which
; allows it to be accessed over D-Bus/ICE.
; How many days should such entries be kept?
; Set to 0 to keep forever, or -1 to disable logging to the DB.
; logdays=31

; To enable public server registration, the serverpassword must be blank, and
; this must all be filled out.
; The password here is used to create a registry for the server name; subsequent
; updates will need the same password. Don't lose your password.
; The URL is your own website, and only set the registerHostname for static IP
; addresses.
; Only uncomment the 'registerName' parameter if you wish to give your "Root" channel a custom name.
;
{{ ';' if MUMBLE_REGISTER_NAME == "" }}registerName={{ MUMBLE_REGISTER_NAME }}
{{ ';' if MUMBLE_REGISTER_PASSWORD == "" }}registerPassword={{ MUMBLE_REGISTER_PASSWORD }}
{{ ';' if MUMBLE_REGISTER_URL == "" }}registerUrl={{ MUMBLE_REGISTER_URL }}
{{ ';' if MUMBLE_REGISTER_HOSTNAME == "" }}registerHostname={{ MUMBLE_REGISTER_HOSTNAME }}

; If this option is enabled, the server will announce its presence via the
; bonjour service discovery protocol. To change the name announced by bonjour
; adjust the registerName variable.
; See http://developer.apple.com/networking/bonjour/index.html for more information
; about bonjour.
bonjour={{ MUMBLE_BONJOUR }}

; If you have a proper SSL certificate, you can provide the filenames here.
; Otherwise, Murmur will create its own certificate automatically.
{{ ';' if MUMBLE_SSL_CERT == "" }}sslCert={{ MUMBLE_SSL_CERT }}
{{ ';' if MUMBLE_SSL_KEY == "" }}sslKey={{ MUMBLE_SSL_KEY }}

; The sslDHParams option allows you to specify a PEM-encoded file with
; Diffie-Hellman parameters, which will be used as the default Diffie-
; Hellman parameters for all virtual servers.
; If a file is not specified, each Murmur virtual server will auto-generate
; its own unique set of 2048-bit Diffie-Hellman parameters on first launch.
{{ ';' if MUMBLE_SSL_DHPARAMS == "" }}sslDHParams={{ MUMBLE_SSL_DHPARAMS }}

; The sslCiphers option chooses the cipher suites to make available for use
; in SSL/TLS. This option is server-wide, and cannot be set on a
; per-virtual-server basis.
;
; This option is specified using OpenSSL cipher list notation (see
; https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT).
;
; It is recommended that you try your cipher string using 'openssl ciphers <string>'
; before setting it here, to get a feel for which cipher suites you will get.
;
; After setting this option, it is recommend that you inspect your Murmur log
; to ensure that Murmur is using the cipher suites that you expected it to.
;
; Note: Changing this option may impact the backwards compatibility of your
; Murmur server, and can remove the ability for older Mumble clients to be able
; to connect to it.
sslCiphers={{ MUMBLE_SSL_CIPHERS }}

; If Murmur is started as root, which user should it switch to?
; This option is ignored if Murmur isn't started with root privileges.
;uname=

; If this options is enabled, only clients which have a certificate are allowed
; to connect.
certrequired={{ MUMBLE_CERT_REQUIRED }}

; If enabled, clients are sent information about the servers version and operating
; system.
sendversion={{ MUMBLE_SEND_VERSION }}

; This sets password hash storage to legacy mode (1.2.4 and before)
; (Note that setting this to true is insecure and should not be used unless absolutely necessary)
;legacyPasswordHash=false

; By default a strong amount of PBKDF2 iterations are chosen automatically. If >0 this setting
; overrides the automatic benchmark and forces a specific number of iterations.
; (Note that you should only change this value if you know what you are doing)
kdfIterations={{ MUMBLE_KDF_ITERATIONS }}

; You can configure any of the configuration options for Ice here. We recommend
; leave the defaults as they are.
; Please note that this section has to be last in the configuration file.
;
[Ice]
Ice.Warn.UnknownProperties={{ MUMBLE_ICE_WARN_UNKNOWN_PROPERTIES }}
Ice.MessageSizeMax={{ MUMBLE_ICE_MESSAGE_SIZE_MAX }}
