# autogen true

{% if NGINX_REDIRECT_TO_FIRST_DOMAIN and DOMAINNAMES is defined and DOMAINNAMES|length > 1 -%}
server {
    listen                 80;
    listen                 [::]:80;
    listen                 443 ssl {{ 'http2' if NGINX_HTTP_VERSION == "2.0" }};
    listen                 [::]:443 ssl {{ 'http2' if NGINX_HTTP_VERSION == "2.0" }};
    server_name            {% for domain in DOMAINNAMES %}{% if not loop.first %}{{ domain }} {% endif %}{% endfor %};

    location / {
        return 301         $real_scheme://{{ DOMAINNAMES[0] }}$request_uri;
    }

    # Let's Encrypt challenge response uri
    location ^~ /.well-known/acme-challenge {
        default_type "text/plain";
        root /var/www/letsencrypt-challenge-response;
    }
}

{% endif -%}
server {
    listen                 80;
    listen                 [::]:80;
    listen                 443 ssl {{ 'http2' if NGINX_HTTP_VERSION == "2.0" }} default_server;
    listen                 [::]:443 ssl {{ 'http2' if NGINX_HTTP_VERSION == "2.0" }};
    {% if DOMAINNAMES is defined -%}
    server_name            {% if NGINX_REDIRECT_TO_FIRST_DOMAIN %}{{ DOMAINNAMES[0] }}{% else %}{% for domain in DOMAINNAMES %}{{ domain }} {% endfor %}{% endif %};
    {%- endif %}

    root                   /var/www/mybb;
    index                  index.php;

    rewrite_by_lua_block {
        -- apply rules to all requests, but not to challenge responses
        if not string.match(ngx.var.request_uri, "^/%.well%-known/acme%-challenge") and
                ngx.var.real_scheme ~= "https" then
            {% if NGINX_TLS_ONLY -%}
            -- redirect scheme to https
            return ngx.redirect("https://" .. ngx.var.host .. ngx.var.request_uri, 301)
            {% else -%}
            -- rewrite scheme to https to enable encryption when accessing installation page
            if string.match(ngx.var.request_uri, "^/install/index%.php") or
                    string.match(ngx.var.request_uri, "^/admin/index%.php") then
                return ngx.redirect("https://" .. ngx.var.host .. ngx.var.request_uri, 301)
            end
            local args = ngx.req.get_uri_args()
            for key, val in pairs(args) do
                if key == "login" or key == "register" then
                    return ngx.redirect("https://" .. ngx.var.host .. ngx.var.request_uri, 301)
                end
            end
            {%- endif %}
        end
    }

    # Let's Encrypt challenge response uri
    location ^~ /.well-known/acme-challenge {
        default_type "text/plain";
        root /var/www/letsencrypt-challenge-response;
    }

    location / {
        # prevent SYN-flood
        # limit concurrent connections per ip
        limit_conn conn_limit_per_ip {{ NGINX_CONN_LIMIT_PER_IP }};
        # limit requests per second per ip
        limit_req zone=req_limit_per_ip burst={{ NGINX_REQ_LIMIT_PER_IP_BURST }};

        try_files $uri $uri/ /index.php?$args;
    }

    # url rewrites
    rewrite ^/forum-([0-9]+)\.html$ /forumdisplay.php?fid=$1;
    rewrite ^/forum-([0-9]+)-page-([0-9]+)\.html$ /forumdisplay.php?fid=$1&page=$2;
    rewrite ^/thread-([0-9]+)\.html$ /showthread.php?tid=$1;
    rewrite ^/thread-([0-9]+)-page-([0-9]+)\.html$ /showthread.php?tid=$1&page=$2;
    rewrite ^/thread-([0-9]+)-lastpost\.html$ /showthread.php?tid=$1&action=lastpost;
    rewrite ^/thread-([0-9]+)-nextnewest\.html$ /showthread.php?tid=$1&action=nextnewest;
    rewrite ^/thread-([0-9]+)-nextoldest\.html$ /showthread.php?tid=$1&action=nextoldest;
    rewrite ^/thread-([0-9]+)-newpost\.html$ /showthread.php?tid=$1&action=newpost;
    rewrite ^/thread-([0-9]+)-post-([0-9]+)\.html$ /showthread.php?tid=$1&pid=$2;
    rewrite ^/post-([0-9]+)\.html$ /showthread.php?pid=$1;
    rewrite ^/announcement-([0-9]+)\.html$ /announcements.php?aid=$1;
    rewrite ^/user-([0-9]+)\.html$ /member.php?action=profile&uid=$1;
    rewrite ^/calendar-([0-9]+)\.html$ /calendar.php?calendar=$1;
    rewrite ^/calendar-([0-9]+)-year-([0-9]+)\.html$ /calendar.php?action=yearview&calendar=$1&year=$2;
    rewrite ^/calendar-([0-9]+)-year-([0-9]+)-month-([0-9]+)\.html$ /calendar.php?calendar=$1&year=$2&month=$3;
    rewrite ^/calendar-([0-9]+)-year-([0-9]+)-month-([0-9]+)-day-([0-9]+)\.html$ /calendar.php?action=dayview&calendar=$1&year=$2&month=$3&day=$4;
    rewrite ^/calendar-([0-9]+)-week-(n?[0-9]+)\.html$ /calendar.php?action=weekview&calendar=$1&week=$2;
    rewrite ^/event-([0-9]+)\.html$ /calendar.php?action=event&eid=$1;

    # disable logging and/or deny access
    location = /robots.txt  { log_not_found off; }
    location = /favicon.ico { access_log off; log_not_found off; }
    location ~ /\.          { access_log off; log_not_found off; deny all; }

    # client caching
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires                  1M;
        more_set_headers         "Pragma: public";
        more_set_headers         "Cache-Control: public, must-revalidate, proxy-revalidate";
        access_log               off;
    }
    location ~* \.(?:rss|atom)$ {
        expires                  1h;
        more_set_headers         "Cache-Control: public";
    }

    # optional include
    include conf.d/mybb/include-mybb;

    # pass PHP scripts to PHP-FPM
    location ~ ^(.+\.php)(.*)$ {
        try_files                $fastcgi_script_name =404;
        fastcgi_split_path_info  ^(.+\.php)(.*)$;
        fastcgi_read_timeout     {{ NGINX_FASTCGI_READ_TIMEOUT }};
        include                  /etc/nginx/fastcgi_params;
        fastcgi_index            index.php;
        fastcgi_param            SCRIPT_FILENAME     $document_root$fastcgi_script_name;
        fastcgi_pass             unix:/var/run/php7-fpm.sock;
    }
}
