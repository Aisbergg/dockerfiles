# container_managed=true                                                       #
#                                                                              #
# NOTE: by default this file is automatically generated on container startup.  #
# To disable the autogeneration simply change the first line of this file to   #
# 'container_managed=false'                                                    #
################################################################################


pid                             /var/run/container/nginx.pid;
worker_processes                {{ NGINX_WORKER_PROCESSES }};
# num of opened files per worker
worker_rlimit_nofile            {{ NGINX_WORKER_OPENED_FILES }};

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

error_log                       /dev/stderr    warn;

###################################################
# Activated Dynamic Modules
###################################################

{% set modules = [(NGINX_LOAD_NDK_HTTP_MODULE, 'ndk_http_module.so'),
    (NGINX_LOAD_NGX_HTTP_CACHE_PURGE_MODULE, 'ngx_http_cache_purge_module.so'),
    (NGINX_LOAD_NGX_HTTP_FANCYINDEX_MODULE, 'ngx_http_fancyindex_module.so'),
    (NGINX_LOAD_NGX_HTTP_HEADERS_MORE_FILTER_MODULE, 'ngx_http_headers_more_filter_module.so'),
    (NGINX_LOAD_NGX_HTTP_IMAGE_FILTER_MODULE, 'ngx_http_image_filter_module.so'),
    (NGINX_LOAD_NGX_HTTP_LUA_MODULE, 'ngx_http_lua_module.so'),
    (NGINX_LOAD_NGX_HTTP_PERL_MODULE, 'ngx_http_perl_module.so'),
    (NGINX_LOAD_NGX_HTTP_REDIS2_MODULE, 'ngx_http_redis2_module.so'),
    (NGINX_LOAD_NGX_HTTP_UPLOADPROGRESS_MODULE, 'ngx_http_uploadprogress_module.so'),
    (NGINX_LOAD_NGX_HTTP_UPSTREAM_FAIR_MODULE, 'ngx_http_upstream_fair_module.so'),
    (NGINX_LOAD_NGX_HTTP_XSLT_FILTER_MODULE, 'ngx_http_xslt_filter_module.so'),
    (NGINX_LOAD_NGX_MAIL_MODULE, 'ngx_mail_module.so'),
    (NGINX_LOAD_NGX_NCHAN_MODULE, 'ngx_nchan_module.so'),
    (NGINX_LOAD_NGX_STREAM_MODULE, 'ngx_stream_module.so'),]
-%}

{% for load, module in modules -%}
{%- if load %}load_module "/usr/lib/nginx/modules/{{ module }}";
{% endif -%}
{% endfor %}


###################################################
# Events Block
###################################################

events {
    worker_connections          {{ NGINX_WORKER_CONNECTIONS }};
    multi_accept                {{ 'on' if NGINX_MULTI_ACCEPT else 'off' }};
}


###################################################
# HTTP Block
###################################################

http {

    ###############################################
    # Basic Settings
    ###############################################

    charset                     utf-8;
    # hide information about nginx
    server_tokens               off;

    include                     /etc/nginx/mime.types;
    default_type                application/octet-stream;

    # maximal allowed size of the client request body
    client_max_body_size        {{ NGINX_CLIENT_MAX_BODY_SIZE | default(NGINX_MAX_UPLOAD_FILESIZE) }};

    ignore_invalid_headers      on;
    types_hash_max_size         2048;
    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;


    ###############################################
    # Performance Tweaks
    ###############################################

    # a comprehensive list of all parameters can be found at:
    # http://nginx.org/en/docs/http/ngx_http_core_module.html

    # for detailed information on the next three parameters read:
    # https://thoughts.t37.net/nginx-optimization-understanding-sendfile-tcp-nodelay-and-tcp-nopush-c55cdd276765
    # sendfile copies data between one file descriptor and another directly in
    # kernel space
    sendfile                    on;
    # optimize the amount of data that is send in one TCP packet
    tcp_nopush                  on;
    # don't introduce artificial delay
    tcp_nodelay                 on;

    # timeout for keep-alive connections. Server will close connections after this time
    keepalive_timeout           {{ NGINX_KEEPALIVE_TIMEOUT }};
    # maximum number of requests that can be served through one keep-alive connection
    keepalive_requests          {{ NGINX_KEEPALIVE_REQUESTS }};
    # allow the server to close the connection after a client stops responding
    reset_timedout_connection   on;
    # how long to wait for the client to send a request header
    client_header_timeout       {{ NGINX_CLIENT_HEADER_TIMEOUT }};
    # read timeout for the request body from client
    client_body_timeout         {{ NGINX_CLIENT_BODY_TIMEOUT }};
    # timeout for transmitting a response to the client
    send_timeout                {{ NGINX_SEND_TIMEOUT }};

    # buffer for reading a client request header
    client_header_buffer_size   {{ NGINX_CLIENT_HEADER_BUFFER_SIZE }};

    large_client_header_buffers {{ NGINX_LARGE_CLIENT_HEADER_BUFFERS_NUMBER }} {{ NGINX_LARGE_CLIENT_HEADER_BUFFERS_SIZE }};
    # when a request body is larger than the buffer size, it is written to a temporary file
    client_body_buffer_size     {{ NGINX_CLIENT_BODY_BUFFER_SIZE }};
    client_body_temp_path       /var/lib/nginx/client_body_temp;
    # buffers used for reading a response from a disk.
    output_buffers              {{ NGINX_OUTPUT_BUFFERS_NUMBER }} {{ NGINX_OUTPUT_BUFFERS_SIZE }};
    # transmission of client data will be postponed until nginx has at least size bytes of data to send
    postpone_output             {{ NGINX_POSTPONE_OUTPUT }};

    # cache files for a short period of time
    # 'max' maximal number of cached filds
    # 'inactive' exclude files that are not accessed within this period of time
    open_file_cache             max={{ NGINX_OPEN_FILE_CACHE_MAX }} inactive={{ NGINX_OPEN_FILE_CACHE_INACTIVE }};
    # invalidate cached file after this time
    open_file_cache_valid       {{ NGINX_OPEN_FILE_CACHE_VALID }};
    # cache only if the file has been accessed a couple of times
    open_file_cache_min_uses    {{ NGINX_OPEN_FILE_CACHE_MIN_USES }};
    open_file_cache_errors      off;


    ###############################################
    # Logging Settings
    ###############################################

    # http://nginx.org/en/docs/http/ngx_http_log_module.html

    # logging format for logstash
    log_format                  logstash '$http_host $remote_addr [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_time $upstream_response_time';

    # forward the logs to the /dev/stdout resp. /dev/stderr so they can be
    # collected by supervisor or docker
    access_log                  /dev/stdout   logstash;


    ###############################################
    # Gzip Settings
    ###############################################

    # http://nginx.org/en/docs/http/ngx_http_gzip_module.html

    gzip                        on;
    gzip_disable                "msie6";
    # minimum length of a response that will be gzipped
    gzip_min_length             1000;
    gzip_vary                   on;
    gzip_proxied                expired no-cache no-store private auth;
    gzip_comp_level             5;
    gzip_buffers                16 8k;
    gzip_http_version           1.1;
    gzip_types                  text/css text/plain text/xml text/x-component application/atom+xml application/javascript application/x-javascript application/json application/xml+rss application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon;


    ###############################################
    # TLS
    ###############################################

    {% if not NGINX_TLS_TERMINATED -%}
    ssl_protocols               TLSv1.2 TLSv1.3;

    # let the server decide which cipher to use
    ssl_prefer_server_ciphers   on;
    # accepted ciphers, use `openssl ciphers -v '...'` to get the actual ciphers.
    ssl_ciphers                 ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:EECDH+AESGCM:EDH+AESGCM;

    # elliptic curve type
    ssl_ecdh_curve              secp521r1:secp384r1:prime256v1;

    # boost performance
    ssl_session_cache           shared:SSL:20m;
    ssl_session_timeout         10m;
    ssl_session_tickets         on;

    # TLS key and certificate
    ssl_certificate             {{ NGINX_TLS_CERT }};
    ssl_certificate_key         {{ NGINX_TLS_KEY }};

    # Diffie-Hellman parameter
    ssl_dhparam                 {{ NGINX_TLS_DHPARAM }};
    {%- endif %}
    {% if NGINX_REWRITE_HTTPS -%}

    # HSTS: enforce the use of HTTPS
    add_header                  Strict-Transport-Security "max-age=31536000; includeSubDomains";
    {%- endif %}


    ###############################################
    # Optional rules for virtual hosts
    ###############################################

    # Lock out bots; use if ($limit_bots = 1) { return 403;    }
    map $http_user_agent $limit_bots {
        default 0;
        ~*(google|bing|yandex|msnbot) 1;
        ~*(AltaVista|Googlebot|Slurp|BlackWidow|Bot|ChinaClaw|Custo|DISCo|Download|Demon|eCatch|EirGrabber|EmailSiphon|EmailWolf|SuperHTTP|Surfbot|WebWhacker) 1;
        ~*(Express|WebPictures|ExtractorPro|EyeNetIE|FlashGet|GetRight|GetWeb!|Go!Zilla|Go-Ahead-Got-It|GrabNet|Grafula|HMView|Go!Zilla|Go-Ahead-Got-It) 1;
        ~*(rafula|HMView|HTTrack|Stripper|Sucker|Indy|InterGET|Ninja|JetCar|Spider|larbin|LeechFTP|Downloader|tool|Navroad|NearSite|NetAnts|tAkeOut|WWWOFFLE) 1;
        ~*(GrabNet|NetSpider|Vampire|NetZIP|Octopus|Offline|PageGrabber|Foto|pavuk|pcBrowser|RealDownload|ReGet|SiteSnagger|SmartDownload|SuperBot|WebSpider) 1;
        ~*(Teleport|VoidEYE|Collector|WebAuto|WebCopier|WebFetch|WebGo|WebLeacher|WebReaper|WebSauger|eXtractor|Quester|WebStripper|WebZIP|Widow|Zeus) 1;
        ~*(Twengabot|htmlparser|libwww|Python|perl|urllib|scan|email|Pyth|PyQ|WebCollector|WebCopy|webcraw) 1;
    }


    ###############################################
    # Basic DoS prevention
    ###############################################

    geo $limited {
        # all ips shall be limeted in requests
        default                 1;
        # exclude limits for search bots
        include                 whitelist.lst;
    }

    map $limited $limit {
        1 $binary_remote_addr;
        0 "";
    }
    limit_conn_status           429;
    limit_req_status            429;


    ###############################################
    # Other
    ###############################################

    # add nosniff header
    #   see: https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header                  X-Content-Type-Options "nosniff";

    # enable anti-cross-site scripting filter built into Internet Explorer,
    # Chrome and Safari
    #   see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    add_header                  X-XSS-Protection "1; mode=block";

    {% if NGINX_BEHIND_PROXY -%}
    # get client ip from header set by reverse proxy
    set_real_ip_from            172.16.0.0/12;
    real_ip_header              X-Forwarded-For;

    # Set $real_scheme variable to X-Forwarded-Proto passed by the reverse proxy
    map $http_x_forwarded_proto $real_scheme {
        default $http_x_forwarded_proto;
        ''      $scheme;
    }
    {%- else %}
    # Define variable 'real_scheme' and assign the value of 'scheme'
    map $scheme $real_scheme {
        default $scheme;
    }
    {%- endif %}

    map $real_scheme $real_https {
        default 0;
        'https' 1;
    }

    map $real_scheme $real_server_port {
        default 80;
        'https' 443;
    }

    # Nginx is serving from 8080 and 8443 but the ports are mapped to 80 and
    # 443. This option prevents Nginx from adding the wrong port in a redirect.
    port_in_redirect            off;


    ###############################################
    # Virtual hosts
    ###############################################

    include                     /etc/nginx/conf.d/*.conf;
    include                     /etc/nginx/conf.d/*/*.conf;
}

include /etc/nginx/non-http/*.conf;
