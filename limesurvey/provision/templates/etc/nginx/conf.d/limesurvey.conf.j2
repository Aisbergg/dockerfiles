# container_managed=true                                                       #
#                                                                              #
# NOTE: by default this file is automatically generated on container startup.  #
# To disable the autogeneration simply change the first line of this file to   #
# 'container_managed=false'                                                    #
################################################################################

limit_conn_log_level            warn;
limit_req_zone                  $limit zone=php:5m rate=25r/s;

{% if NGINX_REDIRECT_TO_FIRST_DOMAIN and DOMAINNAMES|length > 1 -%}
server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    server_name                 {% for domain in DOMAINNAMES %}{% if not loop.first %}{{ domain }} {% endif %}{% endfor %};

    location / {
        return 301              $real_scheme://{{ DOMAINNAMES[0] }}$request_uri;
    }
}
{%- endif %}

server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }} default_server;
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    {% if DOMAINNAMES|length > 0 -%}
    server_name                 {% if NGINX_REDIRECT_TO_FIRST_DOMAIN %}{{ DOMAINNAMES[0] }}{% else %}{% for domain in DOMAINNAMES %}{{ domain }} {% endfor %}{% endif %};
    {%- endif %}

    root                        /container/www;
    index                       index.php;

    {% if NGINX_REWRITE_HTTPS -%}
    if ($real_scheme != "https") {
        return 301              https://$host$request_uri;
    }
    {%- endif %}

    # add nosniff header
    #   see: https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    more_set_headers "X-Content-Type-Options: nosniff";

    # enable anti-cross-site scripting filter built into Internet Explorer,
    # Chrome and Safari
    #   see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    more_set_headers "X-XSS-Protection: 1; mode=block";

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    # turn  off logging for following locations
    location = /robots.txt      { allow all; log_not_found off; access_log off; }
    location = /favicon.ico     { access_log off; log_not_found off; }

    # deny access to non public locations
    location ~ /\.              { access_log off; log_not_found off; deny all; }
    location ~ ^/(protected|framework|themes/\w+/views) { deny  all; }

    # prevent any potentially-executable files in the uploads directory from being executed
    # by forcing their MIME type to text/plain
    location ~* ^/upload/.*.(html|htm|shtml|php|js|swf)$ {
        types { }
        default_type text/plain;
    }

    # pass PHP scripts to PHP-FPM
    location ~ ^(.+\.php)(.*)$ {
        fastcgi_split_path_info ^(.+\.php)(.*)$;
        limit_req               zone=php burst=30;
        try_files               $uri =404;
        fastcgi_read_timeout    {{ NGINX_FASTCGI_READ_TIMEOUT }};
        include                 /etc/nginx/fastcgi_params;
        fastcgi_index           index.php;
        fastcgi_param           SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass            unix:/var/run/container/php7-fpm.sock;
    }

    # client caching
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires                 1M;
        more_set_headers        "Pragma: public";
        more_set_headers        "Cache-Control: public, must-revalidate, proxy-revalidate";
        access_log              off;
    }
}
