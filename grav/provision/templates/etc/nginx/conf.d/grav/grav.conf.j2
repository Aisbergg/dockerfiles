# autogen true

{% if NGINX_REDIRECT_TO_FIRST_DOMAIN and DOMAINNAMES is defined and DOMAINNAMES|length > 1 -%}
server {
    listen                 80;
    listen                 [::]:80;
    listen                 443 ssl {{ 'http2' if NGINX_HTTP_VERSION == "2.0" }};
    listen                 [::]:443 ssl {{ 'http2' if NGINX_HTTP_VERSION == "2.0" }};
    server_name            {% for domain in DOMAINNAMES %}{% if not loop.first %}{{ domain }} {% endif %}{% endfor %};

    location / {
        return 301         $real_scheme://{{ DOMAINNAMES[0] }}$request_uri;
    }

    # Let's Encrypt challenge response uri
    location ^~ /.well-known/acme-challenge {
        default_type "text/plain";
        root /var/www/letsencrypt-challenge-response;
    }
}

{% endif -%}
server {
    listen                 80;
    listen                 [::]:80;
    listen                 443 ssl {{ 'http2' if NGINX_HTTP_VERSION == "2.0" }} default_server;
    listen                 [::]:443 ssl {{ 'http2' if NGINX_HTTP_VERSION == "2.0" }};
    {% if DOMAINNAMES is defined -%}
    server_name            {% if NGINX_REDIRECT_TO_FIRST_DOMAIN %}{{ DOMAINNAMES[0] }}{% else %}{% for domain in DOMAINNAMES %}{{ domain }} {% endfor %}{% endif %};
    {%- endif %}

    root                   /var/www/grav;
    index                  index.php;

    {% if NGINX_TLS_ONLY -%}
    rewrite_by_lua_block {
        -- apply rules to all requests, but not to challenge responses
        if not string.match(ngx.var.request_uri, "^/%.well%-known/acme%-challenge") and
                ngx.var.real_scheme ~= "https" then
            -- redirect scheme to https
            return ngx.redirect("https://" .. ngx.var.host .. ngx.var.request_uri, 301)
        end
    }
    {%- endif %}

    # Let's Encrypt challenge response uri
    location ^~ /.well-known/acme-challenge {
        default_type "text/plain";
        root /var/www/letsencrypt-challenge-response;
    }

    # add security headers
    more_set_headers "X-Frame-Options: SAMEORIGIN";
    more_set_headers "X-XSS-Protection: 1; mode=block";
    more_set_headers "X-Robots-Tag: none";
    more_set_headers "X-Download-Options: noopen";
    more_set_headers "X-Permitted-Cross-Domain-Policies: none";


    # disable logging
    location = /robots.txt  { access_log off; log_not_found off; allow all; }
    location = /favicon.ico { access_log off; log_not_found off; }

    location / {
        # prevent SYN-flood
        # limit concurrent connections per ip
        limit_conn conn_limit_per_ip {{ NGINX_CONN_LIMIT_PER_IP }};
        # limit requests per second per ip
        limit_req zone=req_limit_per_ip burst={{ NGINX_REQ_LIMIT_PER_IP_BURST }};

        try_files $uri $uri/ /index.php?$query_string;
    }

    # deny all direct access for these folders
    location ~* /(\.git|cache|bin|logs|backup|tests)/.*$ {
        deny all;
    }
    # deny running scripts inside core system folders
    location ~* /(system|vendor)/.*\.(txt|xml|md|html|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ {
        deny all;
    }
    # deny running scripts inside user folder
    location ~* /user/.*\.(txt|md|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ {
        deny all;
    }
    # deny access to specific files in the root folder
    location ~ /(LICENSE\.txt|composer\.lock|composer\.json|nginx\.conf|web\.config|htaccess\.txt|\.htaccess) {
        deny all;
    }

    # pass PHP scripts to PHP-FPM
    location ~ \.php$ {
        fastcgi_split_path_info  ^(.+\.php)(/.+)$;
        fastcgi_index            index.php;
        fastcgi_read_timeout     {{ NGINX_FASTCGI_READ_TIMEOUT }};
        include                  /etc/nginx/fastcgi_params;
        fastcgi_param            SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param            PATH_INFO $fastcgi_path_info;
        fastcgi_pass             unix:/var/run/php7-fpm.sock;
        fastcgi_intercept_errors on;
        fastcgi_request_buffering off;
    }

    # client caching
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires                  1M;
        more_set_headers         "Pragma: public";
        more_set_headers         "Cache-Control: public, must-revalidate, proxy-revalidate";
        access_log               off;
    }
}
