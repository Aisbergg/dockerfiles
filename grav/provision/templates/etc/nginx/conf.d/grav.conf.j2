# container_managed=true                                                       #
#                                                                              #
# NOTE: by default this file is automatically generated on container startup.  #
# To disable the autogeneration simply change the first line of this file to   #
# 'container_managed=false'                                                    #
################################################################################


limit_conn_log_level            warn;
limit_req_zone                  $limit zone=php:5m rate=50r/s;

{% if NGINX_REDIRECT_TO_FIRST_DOMAIN and DOMAINNAMES|length > 1 -%}
server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    server_name                 {% for domain in DOMAINNAMES %}{% if not loop.first %}{{ domain }} {% endif %}{% endfor %};

    location / {
        return 301              $real_scheme://{{ DOMAINNAMES[0] }}$request_uri;
    }
}
{%- endif %}

server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }} default_server;
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    {% if DOMAINNAMES|length > 0 -%}
    server_name                 {% if NGINX_REDIRECT_TO_FIRST_DOMAIN %}{{ DOMAINNAMES[0] }}{% else %}{% for domain in DOMAINNAMES %}{{ domain }} {% endfor %}{% endif %};
    {%- endif %}

    root                        /container/www;
    index                       index.php;

    {% if NGINX_REWRITE_HTTPS -%}
    if ($real_scheme != "https") {
        return 301              https://$host$request_uri;
    }
    {%- endif %}

    # add nosniff header
    #   see: https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    more_set_headers "X-Content-Type-Options: nosniff";

    # enable anti-cross-site scripting filter built into Internet Explorer,
    # Chrome and Safari
    #   see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    more_set_headers "X-XSS-Protection: 1; mode=block";

    {% if NGINX_DISALLOW_EMBED -%}
    # disallow embedding this site somewhere else
    more_set_headers            "X-Permitted-Cross-Domain-Policies: none";
    {%- endif %}

    # disable logging
    location = /robots.txt      { access_log off; log_not_found off; allow all; }
    location = /favicon.ico     { access_log off; log_not_found off; }

    location / {
        try_files               $uri /index.php?$query_string;
    }

    location @index {
        try_files               = /index.php?$query_string;
    }

    error_page 418 = @index;
    # deny all direct access for these folders
    location ~* /(\.git|cache|bin|logs|backup|tests)/.*$ { return 418; }
    # deny running scripts inside core system folders
    location ~* /(system|vendor)/.*\.(txt|xml|md|html|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ { return 418; }
    # deny running scripts inside user folder
    location ~* /user/.*\.(txt|md|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ { return 418; }
    # deny access to specific files in the root folder
    location ~ /(LICENSE\.txt|composer\.lock|composer\.json|nginx\.conf|web\.config|htaccess\.txt|\.htaccess) { return 418; }
    # deny access to PHP scripts other than index.php
    location ~ \.php$ { deny all; return 404; }

    # pass index.php to PHP-FPM
    location = /index.php {
        limit_req               zone=php burst=50;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_index           index.php;
        fastcgi_read_timeout    {{ NGINX_FASTCGI_READ_TIMEOUT }};
        include                 fastcgi_params;
        fastcgi_param           SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param           PATH_INFO $fastcgi_path_info;
        fastcgi_pass            unix:/var/run/container/php7-fpm.sock;
        fastcgi_intercept_errors on;
        fastcgi_request_buffering off;
    }

    # client caching
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires                 1M;
        more_set_headers        "Cache-Control: public, must-revalidate, proxy-revalidate";
        access_log              off;
        try_files               $uri @index;
    }
}
