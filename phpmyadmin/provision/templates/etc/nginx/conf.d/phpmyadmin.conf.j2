# container_managed=true                                                       #
#                                                                              #
# NOTE: by default this file is automatically generated on container startup.  #
# To disable the autogeneration simply change the first line of this file to   #
# 'container_managed=false'                                                    #
################################################################################

limit_conn_log_level    warn;
limit_req_zone          $limit zone=php:3m rate=15r/s;

{% if NGINX_REDIRECT_TO_FIRST_DOMAIN and DOMAINNAMES|length > 1 -%}
server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    server_name                 {% for domain in DOMAINNAMES %}{% if not loop.first %}{{ domain }} {% endif %}{% endfor %};

    location / {
        return 301              $real_scheme://{{ DOMAINNAMES[0] }}$request_uri;
    }
}
{%- endif %}

server {
    listen                      8080;
    listen                      [::]:8080;
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }} default_server;
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    {% if DOMAINNAMES|length > 0 -%}
    server_name                 {% if NGINX_REDIRECT_TO_FIRST_DOMAIN %}{{ DOMAINNAMES[0] }}{% else %}{% for domain in DOMAINNAMES %}{{ domain }} {% endfor %}{% endif %};
    {%- endif %}

    root                        /container/www;
    index                       index.php;

    {% if NGINX_REWRITE_HTTPS -%}
    if ($real_scheme != "https") {
        return 301              https://$host$request_uri;
    }
    {%- endif %}

    # block crawler ( see ../nginx.conf )
    if ($limit_bots = 1) {
        return 403;
    }

    location / {
        try_files $uri $uri/ /index.php$args;
    }

    # disable logging and/or deny access
    location = /robots.txt  { access_log off; log_not_found off; }
    location = /favicon.ico { access_log off; log_not_found off; }
    location ~ /\.          { access_log off; log_not_found off; deny all; }

    # pass PHP scripts to PHP-FPM
    location ~ ^(.+\.php)(.*)$ {
        limit_req               zone=php burst=30;
        try_files               $fastcgi_script_name =404;
        fastcgi_split_path_info ^(.+\.php)(.*)$;
        # timeout for reading a response from the FastCGI server
        fastcgi_read_timeout    {{ NGINX_FASTCGI_READ_TIMEOUT }};
        include                 fastcgi_params;
        fastcgi_index           index.php;
        fastcgi_param           SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        fastcgi_pass            unix:/var/run/container/php7-fpm.sock;
    }

    # deny access
    location ~ /(libraries|setup/frames|setup/libs) {
        deny                    all;
        return                  404;
    }

    # client caching
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires                 1M;
        more_set_headers        "Pragma: public";
        more_set_headers        "Cache-Control: public";
        access_log              off;
    }
}
